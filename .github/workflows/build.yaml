name: Build and push image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *' # Hopefully after every release

concurrency:
  group: build-image-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-build-info:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      latest-metal-tag: ${{ steps.get-latest-metal-tag.outputs.latest-metal-tag }}
      run-id: ${{ steps.get-run-id.outputs.run-id }}
    steps:
      - name: Get latest metal tag
        id: get-latest-metal-tag
        run: |
          latestTag=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/tenstorrent/tt-metal/releases" | jq -r ".[0].name")
          echo "latest-metal-tag=$latestTag" >> "$GITHUB_OUTPUT"
      - name: Show latest tag for logging and debug
        run: echo "::notice title=latest-metal-tag::Latest metal tag is ${{ steps.get-latest-metal-tag.outputs.latest-metal-tag }}"
      - name: Get run id of APC run
        id: get-run-id
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tagSha=$(gh api repos/tenstorrent/tt-metal/git/ref/tags/${{ steps.get-latest-metal-tag.outputs.latest-metal-tag }} --jq '.object.sha')
          echo "SHA of tag: $tagSha"
          commitSha=$(gh api repos/tenstorrent/tt-metal/git/tags/$tagSha --jq '.object.sha')
          echo "SHA of commit: $commitSha"
          runId=$(gh run list --repo tenstorrent/tt-metal --commit $commitSha --limit 1000 --json workflowName,databaseId --jq '[.[] | select(.workflowName == "All post-commit tests")] | .[0].databaseId')
          echo "APC run id of commit: $runId"
          if [ -z "$runId" ]; then
            echo "Run ID should not be empty"
            exit 1
          fi
          echo "run-id=$runId" >> "$GITHUB_OUTPUT"
  build-tg-image:
    needs: get-build-info
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      # Docker-provided build framework to build against other platforms
      - uses: ./.github/actions/build-docker-image
        id: build-docker-image
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: tt-metal/Dockerfile.tg
          build-args: 'TT_METAL_VERSION=${{ needs.get-build-info.outputs.latest-metal-tag }}'
          # Doesn't use latest yet... TODO
          tag: ghcr.io/tt-rkim/sw-hello-world/tg-smoke-test:${{ needs.get-build-info.outputs.latest-metal-tag }}
  build-6u-image:
    needs: get-build-info
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts from metal
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          repository: tenstorrent/tt-metal
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # 22.04 artifact... we'll probably need to key on that in the original action in metal
          name: TTMetal_build_any
          run-id: ${{ needs.get-build-info.outputs.run-id }}
      - run: mkdir -p _tt-metal
      - run: tar -xvf -C _tt-metal
      - run: ls -hal _tt-metal
      # Docker-provided build framework to build against other platforms
      - uses: ./.github/actions/build-docker-image
        id: build-docker-image
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: tt-metal/Dockerfile.6u
          build-args: 'TT_METAL_VERSION=${{ needs.get-build-info.outputs.latest-metal-tag }}'
          # Doesn't use latest yet... TODO
          tag: ghcr.io/tt-rkim/sw-hello-world/6u-smoke-test:${{ needs.get-build-info.outputs.latest-metal-tag }}
